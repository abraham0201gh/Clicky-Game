{"version":3,"sources":["components/FriendCard/index.js","components/Wrapper/index.js","components/Nav/index.js","components/Header/index.js","components/Footer/index.js","App.js","index.js"],"names":["FriendCard","props","react_default","a","createElement","className","alt","name","src","image","onClick","clickCard","id","Wrapper","children","Nav","href","nav","result","score","topScore","Header","Footer","App","state","friends","_this","shuffle","friend","find","f","clicked","forEach","item","setState","j","temp","myShuffle","i","length","Math","floor","random","bigImage","x","style","height","width","normalImage","_this2","this","components_Wrapper","components_Nav","components_Header","map","components_FriendCard","key","components_Footer","Component","ReactDOM","render","src_App","document","getElementById"],"mappings":"wuFAgBeA,MAbf,SAAoBC,GAClB,OACAC,EAAAC,EAAAC,cAAA,QAAMC,UAAU,aACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,OAAKE,IAAKL,EAAMM,KAAMC,IAAKP,EAAMQ,MAAOC,QAAS,kBAAMT,EAAMU,UAAUV,EAAMW,KAAKP,UAAU,yBCDrFQ,MAJf,SAAiBZ,GACf,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWJ,EAAMa,wBCmB1BC,MAlBf,SAAad,GACX,OAEEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SACZH,EAAAC,EAAAC,cAAA,KAAGY,KAAK,iBAAiBf,EAAMgB,IAAIV,OAErCL,EAAAC,EAAAC,cAAA,UAAKH,EAAMgB,IAAIC,QACfhB,EAAAC,EAAAC,cAAA,oBACUH,EAAMgB,IAAIE,MADpB,qBAEgBlB,EAAMgB,IAAIG,mBCJnBC,MATf,WACE,OACEnB,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,uJCISkB,MARf,WACE,OACEpB,EAAAC,EAAAC,cAAA,UAAQC,UAAU,UAChBH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,UAAb,kBC6GSkB,6MAxGbC,MAAQ,CACNC,UACAR,IAAK,CACHV,KAAM,cACNW,OAAQ,2BACRC,MAAO,EACPC,SAAU,MAKbT,UAAY,SAAAC,GACX,IAAIa,EAAUC,EAAKC,UAGfC,EAASH,EAAQI,KAAK,SAACC,GACzB,OAAOA,EAAElB,KAAOA,IAGdK,EAAMS,EAAKF,MAAMP,IAGpBW,EAAOG,QAAUH,EAAOG,QAAU,EAKf,IAHFH,EAAOG,SAKrBN,EAAQO,QAAQ,SAAAC,GAASA,EAAKF,QAAU,IACxCN,EAAQM,QAAU,EAClBd,EAAIC,OAAS,2BACbD,EAAIE,MAAQ,IAMRF,EAAIC,OAAS,yBACbD,EAAIE,MAAQF,EAAIE,MAAQ,EACpBF,EAAIE,MAAQF,EAAIG,WAClBH,EAAIG,SAAWH,EAAIG,SAAW,IAKpCM,EAAKQ,SAAS,CAAET,UAASR,WAK9BU,QAAU,WAGR,IAFD,IAC0BQ,EAAGC,EADzBC,EAAYX,EAAKF,MAAMC,QACvBa,EAAID,EAAUE,SACTD,EAAI,GAEVF,EAAOC,EADPF,EAAIK,KAAKC,MAAMD,KAAKE,UAAYJ,EAAE,KAElCD,EAAUF,GAAKE,EAAUC,GACzBD,EAAUC,GAAKF,EAEpB,OAAOC,KAKPM,SAAW,SAACC,GACVA,EAAEC,MAAMC,OAAS,OACjBF,EAAEC,MAAME,MAAQ,UAGlBC,YAAc,SAACJ,GACbA,EAAEC,MAAMC,OAAS,OACjBF,EAAEC,MAAME,MAAQ,gFAWT,IAAAE,EAAAC,KACP,OACEhD,EAAAC,EAAAC,cAAC+C,EAAD,KACEjD,EAAAC,EAAAC,cAACgD,EAAD,CAAKnC,IAAKiC,KAAK1B,MAAMP,MACrBf,EAAAC,EAAAC,cAACiD,EAAD,MACCH,KAAK1B,MAAMC,QAAQ6B,IAAI,SAAA1B,GAAM,OAC5B1B,EAAAC,EAAAC,cAACmD,EAAD,CACE5C,UAAWsC,EAAKtC,UAChBC,GAAIgB,EAAOhB,GACX4C,IAAK5B,EAAOhB,GACZH,MAAOmB,EAAOnB,UAGlBP,EAAAC,EAAAC,cAACqD,EAAD,cAlGUC,mBCJlBC,IAASC,OAAO1D,EAAAC,EAAAC,cAACyD,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.ddd01aae.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction FriendCard(props) {\n  return (\n  <main className=\"container\">\n    <div className=\"card\">\n      <div className=\"img-container\">\n        <img alt={props.name} src={props.image} onClick={() => props.clickCard(props.id)} className=\"clickCards\" />\n      </div>\n    </div>\n  </main>\n  );\n}\n\n\nexport default FriendCard;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./style.css\";\n\n\n\nfunction Nav(props) {\n  return (\n\n    <nav className=\"navbar\">\n      <ul>\n        <li className=\"brand\">\n          <a href=\"/Clicky-Game/\">{props.nav.name}</a>\n        </li>\n        <li>{props.nav.result}</li>\n        <li>\n          Score: {props.nav.score}&nbsp;\n          | Top Score: {props.nav.topScore}\n        </li>\n      </ul>\n    </nav>\n  );\n}\n\nexport default Nav;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Header() {\n  return (\n    <header className=\"headerMain\">\n      <h1>Clicky Game!</h1>\n      <h2>Click on any image to earn points.  &nbsp;If you click the same image more than once, you lose all points and the game starts over.</h2>\n    </header>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Footer() {\n  return (\n    <footer className=\"footer\"> \n      <p className=\"bottom\">Clicky Game!</p>\n    </footer>\n  );\n}\n\nexport default Footer;\n\n","import React, { Component } from \"react\";\nimport FriendCard from \"./components/FriendCard\";\nimport Wrapper from \"./components/Wrapper\";\n// import Title from \"./components/Title\";\nimport friends from \"./friends.json\";\nimport Nav from \"./components/Nav\";\nimport Header from \"./components/Header\";\nimport Footer from \"./components/Footer\";\n\nclass App extends Component {\n  // Setting this.state.friends to the friends json array\n  state = {\n    friends,\n    nav: {\n      name: \"Clicky Game\",\n      result: \"Click an image to begin!\",\n      score: 0,\n      topScore: 0\n    }\n  };\n\n   //Every clikck causes cards to shuffle\n   clickCard = id => {\n    var friends = this.shuffle();\n\n    //Retrieving number of clicks for current card selected (through id)\n    var friend = friends.find((f) => {\n      return f.id === id;\n    }); \n\n    var nav = this.state.nav\n\n     //Storing number of player card clicks  \n     friend.clicked = friend.clicked + 1;\n     //Click count stored\n     var numClicked = friend.clicked;\n\n     //If player loses (clicking on card more than once)\n     if (numClicked === 2) {\n        //Setting number of times cards have clicked back to zero\n        friends.forEach(item => {item.clicked = 0;});\n        friends.clicked = 0;  \n        nav.result = \"You Guessed Incorrectly!\";\n        nav.score = 0;\n        // Reset arrays (saving new state and display changes)\n        //this.setState({ friends, nav });\n      }\n          //If player is successful (only clicks once)  \n          else { \n            nav.result = \"You Guessed Correctly!\";\n            nav.score = nav.score + 1;\n            if (nav.score > nav.topScore) {\n              nav.topScore = nav.topScore + 1; \n            }           \n              //Reset arrays (saving new state and display changes)\n              //this.setState({ friends, nav });\n          } \n        this.setState({ friends, nav });     \n        //console.log(id);\n   };\n\n   //Function to shuffle cards\n   shuffle = () => {\n    var myShuffle = this.state.friends;\n    var i = myShuffle.length, j, temp;\n     while(--i > 0) {\n       j = Math.floor(Math.random() * (i+1));\n       temp = myShuffle[j];\n       myShuffle[j] = myShuffle[i];\n       myShuffle[i] = temp;\n     }\n  return myShuffle;\n  }\n\n\n  //Mouse hover over a card image (represented by x) causes the card to increase in size\n  bigImage = (x) => {\n    x.style.height = \"64px\";\n    x.style.width = \"64px\";\n  }\n  \n  normalImage = (x) => {\n    x.style.height = \"32px\";\n    x.style.width = \"32px\";\n  }  \n\n  // removeFriend = id => {\n  //   // Filter this.state.friends for friends with an id not equal to the id being removed\n  //   const friends = this.state.friends.filter(friend => friend.id !== id);\n  //   // Set this.state.friends equal to the new friends array\n  //   this.setState({ friends });\n  // };\n\n  // Map over this.state.friends and render a FriendCard component for each friend object\n  render() {\n    return (\n      <Wrapper>\n        <Nav nav={this.state.nav} />        \n        <Header />\n        {this.state.friends.map(friend => (\n          <FriendCard\n            clickCard={this.clickCard}\n            id={friend.id}\n            key={friend.id}\n            image={friend.image}\n          />\n        ))}\n        <Footer />\n      </Wrapper>\n    );\n  }\n}\n\n\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}